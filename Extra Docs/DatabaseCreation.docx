-- Create Database
CREATE DATABASE SchoolManagement;

-- Connect to the database
\c SchoolManagement;

-- Create Tables with proper constraints and relationships
CREATE TABLE Schools (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    province VARCHAR(100) NOT NULL,
    district VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Groups (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    number INTEGER NOT NULL CHECK (number > 0),
    description TEXT,
    school BIGINT NOT NULL REFERENCES Schools(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(school, number)
);

CREATE TABLE Students (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    surname VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    grade INTEGER NOT NULL CHECK (grade >= 1 AND grade <= 12),
    id_num VARCHAR(20) UNIQUE NOT NULL,
    province VARCHAR(100) NOT NULL,
    address TEXT NOT NULL, -- Added address field
    password VARCHAR(255) NOT NULL,
    group_id BIGINT REFERENCES Groups(id) ON DELETE SET NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Mentors (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    surname VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    id_num VARCHAR(20) UNIQUE NOT NULL,
    province VARCHAR(100) NOT NULL,
    address TEXT NOT NULL, -- Added address field
    password VARCHAR(255) NOT NULL,
    incentives DECIMAL(10,2) DEFAULT 0.00 CHECK (incentives >= 0),
    group_id BIGINT REFERENCES Groups(id) ON DELETE SET NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Teachers (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    surname VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    id_num VARCHAR(20) UNIQUE NOT NULL,
    province VARCHAR(100) NOT NULL,
    address TEXT NOT NULL, -- Added address field
    password VARCHAR(255) NOT NULL,
    salary DECIMAL(10,2) NOT NULL CHECK (salary >= 0),
    group_id BIGINT REFERENCES Groups(id) ON DELETE SET NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Admin (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    surname VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Subject table needed for resources and sessions
CREATE TABLE Subjects (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE resources (
    id BIGSERIAL PRIMARY KEY,
    upload_by BIGINT NOT NULL, -- References either Teacher or Mentor
    subject BIGINT NOT NULL REFERENCES Subjects(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    file_path VARCHAR(500), -- Recommended: store file path or URL
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sessions (
    id BIGSERIAL PRIMARY KEY,
    hoster BIGINT NOT NULL, -- References either Teacher or Mentor
    capacity INTEGER NOT NULL CHECK (capacity > 0),
    name VARCHAR(255) NOT NULL,
    subject BIGINT NOT NULL REFERENCES Subjects(id) ON DELETE CASCADE,
    description TEXT,
    duration INTEGER NOT NULL CHECK (duration > 0), -- in minutes
    start_time TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE quizzes (
    id BIGSERIAL PRIMARY KEY,
    upload_by BIGINT NOT NULL, -- References either Teacher or Mentor
    subject BIGINT NOT NULL REFERENCES Subjects(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    file_path VARCHAR(500), -- Recommended: store file path or URL
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Junction table for session participants (Students)
CREATE TABLE session_participants (
    session_id BIGINT NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    student_id BIGINT NOT NULL REFERENCES Students(id) ON DELETE CASCADE,
    enrolled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (session_id, student_id)
);

-- Indexes for better performance
CREATE INDEX idx_students_email ON Students(email);
CREATE INDEX idx_students_group ON Students(group_id);
CREATE INDEX idx_teachers_email ON Teachers(email);
CREATE INDEX idx_mentors_email ON Mentors(email);
CREATE INDEX idx_admin_email ON Admin(email);
CREATE INDEX idx_resources_subject ON resources(subject);
CREATE INDEX idx_resources_upload ON resources(upload_by);
CREATE INDEX idx_sessions_hoster ON sessions(hoster);
CREATE INDEX idx_sessions_subject ON sessions(subject);
CREATE INDEX idx_sessions_time ON sessions(start_time);
CREATE INDEX idx_quizzes_subject ON quizzes(subject);
CREATE INDEX idx_quizzes_upload ON quizzes(upload_by);

-- Recommendations (optional but helpful):
-- 1. Consider adding a 'user_type' field to resources, sessions, and quizzes to distinguish between Teacher/Mentor uploads
-- 2. Add a 'status' field to sessions (scheduled, ongoing, completed, cancelled)
-- 3. Consider adding file size and MIME type fields to resources and quizzes
-- 4. Add a 'max_participants' field to sessions for better capacity management